<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.personal.oyl.newffms.incoming.store.mapper.IncomingMapper">
    <resultMap id="BaseResultMap" type="com.personal.oyl.newffms.incoming.domain.Incoming">
        <id column="incoming_oid" property="key.incomingOid" jdbcType="DECIMAL" />
        <result column="incoming_desc" property="incomingDesc" jdbcType="NVARCHAR" />
        <result column="amount" property="amount" jdbcType="DECIMAL" />
        <result column="incoming_type" property="incomingType" jdbcType="VARCHAR" />
        <result column="confirmed" property="confirmed" jdbcType="BIT" />
        <result column="owner_oid" property="ownerOid" jdbcType="DECIMAL" />
        <result column="incoming_date" property="incomingDate" jdbcType="TIMESTAMP" />
        <result column="batch_num" property="batchNum" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="create_by" property="createBy" jdbcType="NVARCHAR" />
        <result column="update_by" property="updateBy" jdbcType="NVARCHAR" />
        <result column="seq_no" property="seqNo" jdbcType="DECIMAL" />
    </resultMap>


    <sql id="Base_Column_List">
        incoming_oid, incoming_desc, amount, incoming_type, confirmed, owner_oid, incoming_date, batch_num, create_time, update_time, create_by, update_by, seq_no
    </sql>

    <select id="select" resultMap="BaseResultMap" parameterType="com.personal.oyl.newffms.incoming.domain.Incoming">
        select <include refid="Base_Column_List" />
        from incoming
        <where>
            <if test="key != null and key.incomingOid != null">
                incoming_oid = #{key.incomingOid,jdbcType=DECIMAL}
            </if>
            <if test="ownerOid != null">
                and owner_oid = #{ownerOid,jdbcType=DECIMAL}
            </if>
            <if test="incomingType != null">
                and incoming_type = #{incomingType,jdbcType=VARCHAR}
            </if>
        </where>
    </select>
    
    <delete id="delete" parameterType="com.personal.oyl.newffms.incoming.domain.IncomingKey" >
        delete from incoming
        <where>
            <if test="incomingOid != null">
                incoming_oid = #{incomingOid,jdbcType=DECIMAL}
            </if>
        </where>
    </delete>

    <insert id="insert" parameterType="com.personal.oyl.newffms.incoming.domain.Incoming" useGeneratedKeys="true" keyProperty="key.incomingOid">
        insert into incoming(
            incoming_desc,
            amount,
            incoming_type,
            confirmed,
            owner_oid,
            incoming_date,
            batch_num,
            create_time,
            create_by)
        values (
            #{incomingDesc,jdbcType=VARCHAR},
            #{amount,jdbcType=DECIMAL},
            #{incomingType,jdbcType=VARCHAR},
            #{confirmed,jdbcType=BIT},
            #{ownerOid,jdbcType=DECIMAL},
            #{incomingDate,jdbcType=TIMESTAMP},
            #{batchNum,jdbcType=VARCHAR},
            #{createTime,jdbcType=TIMESTAMP},
            #{createBy,jdbcType=NVARCHAR})
    </insert>
    
    <update id="updateStatus" parameterType="java.util.Map">
        update incoming set
            confirmed = #{confirmed,jdbcType=BIT},
            seq_no = seq_no + 1,
            update_by = #{updateBy,jdbcType=NVARCHAR},
            update_time = #{updateTime,jdbcType=TIMESTAMP}
        where incoming_oid = #{incomingOid,jdbcType=DECIMAL} and seq_no = #{seqNo,jdbcType=DECIMAL}
    </update>
    
    <update id="updateInfo" parameterType="java.util.Map">
        update incoming set
            incoming_desc = #{incomingDesc,jdbcType=VARCHAR},
            amount = #{amount, jdbcType=DECIMAL},
            incoming_type = #{incomingType,jdbcType=VARCHAR},
            owner_oid = #{ownerOid,jdbcType=DECIMAL},
            incoming_date = #{incomingDate,jdbcType=TIMESTAMP},
            seq_no = seq_no + 1,
            update_by = #{updateBy,jdbcType=NVARCHAR},
            update_time = #{updateTime,jdbcType=TIMESTAMP}
        where incoming_oid = #{incomingOid,jdbcType=DECIMAL} and seq_no = #{seqNo,jdbcType=DECIMAL}
    </update>
    
    <select id="getCountOfSummary" parameterType="java.util.Map" resultType="int">
        select count(*)
            from incoming
        <where>
            <if test="ownerOid != null">
                owner_oid = #{ownerOid,jdbcType=DECIMAL}
            </if>
            <if test="incomingType != null">
                and incoming_type = #{incomingType,jdbcType=VARCHAR}
            </if>
            <if test="confirmed != null">
                and confirmed = #{confirmed,jdbcType=BIT}
            </if>
            <if test="incomingDesc != null">
                and incoming_desc like concat('%',#{incomingDesc,jdbcType=NVARCHAR},'%')
            </if>
        </where>
    </select>
    
    <select id="getListOfSummary" parameterType="java.util.Map" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" />
            from incoming i
            <where>
                <if test="ownerOid != null">
                    and owner_oid = #{ownerOid,jdbcType=DECIMAL}
                </if>
                <if test="incomingType != null">
                    and incoming_type = #{incomingType,jdbcType=VARCHAR}
                </if>
                <if test="confirmed != null">
                    and confirmed = #{confirmed,jdbcType=BIT}
                </if>
                <if test="incomingDesc != null">
                    and incoming_desc like concat('%',#{incomingDesc,jdbcType=NVARCHAR},'%')
                </if>
            </where>
            <if test="sortField == null" >
                order by incoming_date desc
            </if>
            <if test="sortField != null" >
                order by ${sortField} ${sortDir}
            </if>
            limit #{start}, #{sizePerPage}
    </select>
    
    <select id="selectByDateRange" resultMap="BaseResultMap" parameterType="java.util.Map">
        select <include refid="Base_Column_List" />
        from incoming
        <where>
            <if test="from != null">
              incoming_date >= #{from,jdbcType=TIMESTAMP}
            </if>
            <if test="to != null">
              and incoming_date <![CDATA[<=]]> #{to,jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>
</mapper>

